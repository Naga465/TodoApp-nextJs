import Head from "next/head";
import { useState } from "react";
import { useNotes } from "../customHooks";
import AddNote from "../molecules/addNote";
import Modal from "../molecules/Modal";
import { Note, ViewNotesProps } from "../molecules/types";
import styles from "../styles/Note.module.css";
import { CALL_API, getTime } from "../utils";
import Image from "next/image";
import ActionIcon from "../public/actions.png";
import { useRouter } from "next/dist/client/router";
import { useMemo } from "react";

const RenderNote = ({
  note,
  index,
  deleteNote,
}: {
  note: Note;
  index: number;
  deleteNote: (id: number) => Promise<void>;
}) => {
  const router = useRouter();
  const [noteId, setNoteId] = useState<number | null>(null);

  const _openMenu = (id: number) => (e: any) => {
    e.stopPropagation();
    setNoteId((_id) => (id === _id ? null : id));
  };

  const _handleDelete = (id: number) => async (e: any) => {
    e.stopPropagation();
    setNoteId(null);
    try {
      await deleteNote(id);
    } catch (err) {
      alert(err.message);
    }
  };
  return (
    <div
      onClick={() => router.push(`note/${note.id}/edit`)}
      key={note.id}
      className={styles.card}
    >
      <label className={styles.timeStamp}>{`Edited ${getTime(
        note.timeStamp
      )}`}</label>
      <h2>{note.title}</h2>
      <p>{note.description}</p>
      <div className={styles.actions}>
        <div style={{ position: "relative" }}>
          <div className={styles.actionIcon}>
            <Image
              onClick={_openMenu(note.id)}
              height={18}
              width={18}
              src={ActionIcon}
              alt="actions"
            />
          </div>
          {noteId === note.id && (
            <div className={styles.popOver}>
              <div onClick={_handleDelete(note.id)} className={styles.menuItem}>
                Delete
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default function Home(props: ViewNotesProps) {
  const { notes, addNote, deleteNote } = useNotes({ initNotes: props.notes });
  const [show, setShow] = useState<boolean>(false);

  return (
    <div>
      <Head>
        <title>TODO</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.addNote}>
        <AddNote onSave={addNote} />
        <div className={styles.grid}>
          {notes.map((note, index) => (
            <RenderNote
              key={note.id}
              note={note}
              index={index}
              deleteNote={deleteNote}
            />
          ))}
        </div>
      </div>
      <Modal show={show} onClose={() => setShow(false)} />
    </div>
  );
}

export const getStaticProps = async () => {
  const data = await CALL_API({ url: "/notes" });
  return {
    props: {
      notes: data,
    },
  };
};
